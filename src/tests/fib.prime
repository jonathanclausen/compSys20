test:                                # %rdi = n
    subq $8, %rsp                    # Læg returaddressen på stakken
    movq %r11, (%rsp)
    subq $8, %rsp                    # Gem n på stakken
    movq %rdi, (%rsp)
    cble $2, %rdi, .recurse          # Rekursion eller base case?
.base_case:
    movq $1, %rax                    # Gem 1 som returværdi
    jmp     .end                     # og gå til slutningen af funktionen
.recurse:
    subq $1, %rdi                    # Giv n-1 som argument
    call .fib, %r11                  # Kald fib(n-1)
    subq $8, %rsp                    # Gem den ene returværdi på stakken
    movq %rax, (%rsp)
    subq $1, %rdi                    # Giv n-2 (n-1-1) som argument
    call .fib, %r11                  # Kald fib(n-2)
    movq (%rsp), %r15                # Hent den første returværdi fra stakken
    addq $8, %rsp
    addq %r15, %rax                  # Læg de to returværdier sammen og få den nye returværdi
.end:
    movq (%rsp), %rdi                # Hent n tilbage fra stakken
    addq $8, %rsp
    movq (%rsp),%r11                 # Hent returaddressen fra stakken
    addq $8, %rsp
    ret %r11                         # return %rax

.main:
    subq $8, %rsp
    movq %r11, (%rsp)
    movq $10, %rdi                   # Giv 10 som argument
    call .fib, %r11                  # Kald fib(10)
    movq (%rsp), %r11
    addq $8, %rsp
    ret %r11